var MLPModule,
  slice = [].slice;

$.mlpFnName = function(fn) {
  return fn.name || (fn + '').split(/\s|\(/)[1];
};

$.mlpInit = function(fn, name, set) {
  if (set == null) {
    set = true;
  }
  window.MLP = window.MLP || {};
  window.MLP.apps = window.MLP.apps || {};
  window.MLP.instances = window.MLP.instances || {};
  window.MLP.config = window.MLP.config || {};
  if (fn && set) {
    name = name || $.mlpFnName(fn);
    return window.MLP.apps[name] = fn;
  } else {
    return window.MLP.apps[fn];
  }
};


/*
@fn (obj) - the JS object class
@name (str) - the name of the class
@bypass (bool) - whether or not the plugin can be instantiated multiple times
@elPlugin (bool) - whether to create an element based plugin $(...).pluginName 
or regular JQuery method $.methodName
@returnContext (bool) - whether to return an object with class context 
and the element which instantiated the plugin (@elPlugin must be true)
 */

$.mlpPlugin = function(fn, name, bypass, elPlugin, returnContext) {
  var obj;
  if (bypass == null) {
    bypass = false;
  }
  if (elPlugin == null) {
    elPlugin = true;
  }
  if (returnContext == null) {
    returnContext = true;
  }
  obj = {};
  $.mlpInit(fn, name);
  name = name || $.mlpFnName(fn);
  obj[name] = function() {
    var _el, _this, args, option, result;
    option = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    _this = [];
    _el = null;
    _el = this.each(function() {
      var $this, data, key;
      $this = $(this);
      key = 'mlp-' + name;
      data = $this.data(key);
      if (!data || bypass) {
        $this.data('name', name);
        $this.data(key, (data = new fn(option, this)));
      }
      if (typeof option === 'string') {
        data[option].apply(data, args);
      }
      return _this.push(data);
    });
    result = returnContext ? {
      mlp: _this,
      el: _el
    } : null;
    return result;
  };
  $.fn.extend(obj);
  if (!elPlugin) {
    obj[name] = function(option) {
      return new fn(option);
    };
    return $.extend(obj);
  }
};

MLPModule = (function() {
  MLPModule.prototype.defaults = {};

  function MLPModule(options, element) {
    this.ops = $.extend({}, this.defaults, options);
    this.sel = this.sel || {};
    this.el = this.el || {};
    this.el.target = $(element);
    this.init();
  }

  MLPModule.prototype.init = function() {
    this.classes = {
      active: 'is-active',
      offscreen: 'l-offscreen'
    };
    this.keys = {
      esc: 27,
      down: 40,
      up: 38,
      left: 37,
      right: 39,
      o: 79,
      space: 32,
      tab: 9,
      enter: 13
    };
    this.aria = {
      expanded: 'aria-expanded',
      hidden: 'aria-hidden',
      controls: 'aria-controls',
      selected: 'aria-selected',
      invalid: 'aria-invalid',
      pressed: 'aria-pressed',
      described: 'aria-describedby',
      checked: 'aria-checked',
      label: 'aria-label',
      labelled: 'aria-labelledby',
      popup: 'aria-haspopup'
    };
    return this.attr = {
      tabindex: 'tabindex'
    };
  };

  MLPModule.prototype.stop = function(e) {
    e.preventDefault();
    return e.stopPropagation();
  };

  MLPModule.prototype.target = function(e) {
    return $(e.target);
  };

  MLPModule.prototype.currentTarget = function(e) {
    return $(e.currentTarget);
  };

  MLPModule.prototype.isEnter = function(e) {
    return this.keycode(e) === this.keys.enter;
  };

  MLPModule.prototype.isSpace = function(e) {
    return this.keycode(e) === this.keys.space;
  };

  MLPModule.prototype.isTab = function(e) {
    return this.keycode(e) === this.keys.tab;
  };

  MLPModule.prototype.isBackTab = function(e) {
    return e.shiftKey && this.isTab(e);
  };

  MLPModule.prototype.isEsc = function(e) {
    return this.keycode(e) === this.keys.esc;
  };

  MLPModule.prototype.isEnterOrSpace = function(e) {
    return this.isEnter(e) || this.isSpace(e);
  };

  MLPModule.prototype.keycode = function(e) {
    return e.which;
  };

  MLPModule.prototype.isIE = function(version) {
    if (version == null) {
      version = 8;
    }
    return bowser.msie && bowser.version === version;
  };

  return MLPModule;

})();

$.mlpInit(MLPModule, 'MLPModule');


/*
  Exchanges a background based on mouse over via JS. 
  (Useful for CMS type sites which need to control background images.)
  Usage: div(data-js-bg-exchange='$url', data-bg-active='$url2')
 */
var BgExchange,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BgExchange = (function(superClass) {
  extend(BgExchange, superClass);

  function BgExchange() {
    return BgExchange.__super__.constructor.apply(this, arguments);
  }

  BgExchange.prototype.init = function() {
    BgExchange.__super__.init.call(this);
    this.events();
    return this.exchangeBg(this.getDefaultBg());
  };

  BgExchange.prototype.events = function() {
    this.el.target.on('mouseenter', (function(_this) {
      return function(e) {
        return _this.activeBg();
      };
    })(this));
    return this.el.target.on('mouseout', (function(_this) {
      return function(e) {
        return _this.inactiveBg();
      };
    })(this));
  };

  BgExchange.prototype.inactiveBg = function() {
    return this.exchangeBg(this.getDefaultBg());
  };

  BgExchange.prototype.activeBg = function() {
    return this.exchangeBg(this.el.target.data('bg-active'));
  };

  BgExchange.prototype.getDefaultBg = function() {
    return this.el.target.data('js-bg-exchange');
  };

  BgExchange.prototype.exchangeBg = function(bg) {
    return this.el.target.css('background-image', 'url(' + bg + ')');
  };

  return BgExchange;

})(MLP.apps.MLPModule);

$.mlpPlugin(BgExchange, 'BgExchange', true);


/*
  Loads backgrounds via JS. (Useful for CMS type sites which need to control background images.)
  Usage: div(data-js-bg-loader='$url', data-bg-mobile='$url2')
 */
var BgLoader,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BgLoader = (function(superClass) {
  extend(BgLoader, superClass);

  function BgLoader() {
    return BgLoader.__super__.constructor.apply(this, arguments);
  }

  BgLoader.prototype.defaults = {
    screen: {
      mobile: MLP.config.mobile || 767
    },
    bg: {}
  };

  BgLoader.prototype.init = function() {
    $(window).bind('resize orientationchange', (function(_this) {
      return function(e) {
        return _this.setBackground();
      };
    })(this));
    return this.setBackground();
  };

  BgLoader.prototype.getEl = function() {
    var selector;
    selector = this.el.target.data('bg-selector');
    if (selector) {
      return $(selector);
    } else {
      return this.el.target;
    }
  };

  BgLoader.prototype.setBackground = function() {
    var bg;
    if ($(window).width() <= this.ops.screen.mobile) {
      bg = this.getBackground('bg-mobile');
    }
    if (!bg) {
      bg = this.getBackground();
    }
    if (bg) {
      return this.getEl().css({
        'background-image': "url('" + bg + "')"
      });
    }
  };

  BgLoader.prototype.getBackground = function(key) {
    var bg;
    if (key == null) {
      key = 'js-bg-loader';
    }
    bg = this.el.target.data(key);
    if (bg) {
      return bg;
    } else {
      return this.ops.bg[key];
    }
  };

  return BgLoader;

})(MLP.apps.MLPModule);

$.mlpPlugin(BgLoader, 'BgLoader', true);


/*
  @depends slick slider
  Usage:
    .c-carousel(data-js-carousel)
      .c-carousel__slide Slide 1
      .c-carousel__slide Slide 2
      .c-carousel__slide Slide 3
 */
var Carousel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Carousel = (function(superClass) {
  extend(Carousel, superClass);

  function Carousel() {
    return Carousel.__super__.constructor.apply(this, arguments);
  }

  Carousel.prototype.init = function() {
    var _this;
    Carousel.__super__.init.call(this);
    this.el.next = this.el.target.find('.js-next');
    this.el.prev = this.el.target.find('.js-prev');
    _this = this;
    return MLP.instances.slick = this.el.target.slick({
      'autoplay': true,
      'autoplaySpeed': 3000,
      'speed': 1000,
      'dots': this.el.target.data('has-dots'),
      'infinite': true,
      'variableWith': true,
      'slidesToShow': 1,
      'prevArrow': '<div class="c-parallax__prev c-parallax__btn"><img data-role="none" alt="previous" src="' + this.el.target.data('btn-prev') + '"> </div>',
      'nextArrow': '<div class="c-parallax__next c-parallax__btn"><img data-role="none" alt="next" src="' + this.el.target.data('btn-next') + '"> </div>'
    });
  };

  return Carousel;

})(MLP.apps.MLPModule);

$.mlpPlugin(Carousel, 'Carousel');


/*
  Every plugin initialization goes here.
 */
$(document).ready(function() {
  return console.log('%c Welcome to FELab, a MullenLowe Profero product. ', 'background: #c3a90a;\ncolor: #ffffff;\nfont-size: 18px;\nfont-family: "Helvetica Neue";\nfont-weight: 300;\nline-height: 30px;\nheight: 30px;\npadding: 5px');
});


/*
  Auto formats phone/fax number for mobile.
  Usage:
    a(data-js-intent='tel:0354618432', href='#') 03-5461-8432
    meta(name='format-detection', content='telephone=no')
 */
var Intent,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Intent = (function(superClass) {
  extend(Intent, superClass);

  function Intent() {
    return Intent.__super__.constructor.apply(this, arguments);
  }

  Intent.prototype.defaults = {
    screen: {
      mobile: MLP.config.mobile || 767
    }
  };

  Intent.prototype.init = function() {
    Intent.__super__.init.call(this);
    this.events();
    return this.format();
  };

  Intent.prototype.events = function() {
    return $(window).bind('resize orientationchange', (function(_this) {
      return function(e) {
        return _this.format();
      };
    })(this));
  };

  Intent.prototype.contains = function(haystack) {
    return this.intent.indexOf(haystack) > -1;
  };

  Intent.prototype.formatFax = function() {
    var $anchors;
    $anchors = this.el.target.find('a');
    if ($anchors.length) {
      $anchors.addClass('link-fax');
      return $anchors.removeAttr('href');
    }
  };

  Intent.prototype.formatPhone = function() {
    if (this.width <= this.ops.screen.mobile) {
      return this.el.target.attr('href', this.intent);
    } else {
      return this.el.target.removeAttr('href');
    }
  };

  Intent.prototype.format = function() {
    this.width = $(window).width();
    this.intent = this.el.target.data('js-intent');
    if (this.intent) {
      if (this.contains('tel')) {
        this.formatPhone();
      }
      if (this.contains('fax')) {
        return this.formatFax();
      }
    }
  };

  return Intent;

})(MLP.apps.MLPModule);

$.mlpPlugin(Intent, 'Intent', true);
